// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  credits       Int      @default(1500)

  // Relations
  userToProjects UserToProject[]
  Chat           Chat[]
  sessions       Session[]
  accounts       Account[]

  @@map("user")
}

model Project {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  githubUrl            String
  deleteAt             DateTime?
  commits              Commit[]
  userToProjects       UserToProject[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  Chat                 Chat[]
  visibility           Visibility            @default(PUBLIC)
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  project            Project  @relation(fields: [projectId], references: [id])
}

model SourceCodeEmbedding {
  id               String                     @id @default(cuid())
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  summaryEmbedding Unsupported("vector(768)")
  sourceCode       String                     @db.Text
  fileName         String
  summary          String                     @db.Text
  projectId        String
  project          Project                    @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Chat {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projectId String
  userId    String
  title     String        @default("New Chat")
  messages  ChatMessage[]
  project   Project       @relation(fields: [projectId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  chatId    String
  role      String // "user", "assistant", "system"
  content   String   @db.Text
  sources   Json? // For storing RAG sources
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
